[
{
	"uri": "https://cdd.example.com/docs/presenter/design_notes/message_flows.html",
	"title": "Message Flows",
	"tags": [],
	"description": "",
	"content": "Device and Application Message FlowsThe shadow document for devices tracks state of local resources. In the case of the motor board, this is led which maps to the second motor controller, which is not used. This give an indicator that things are working without having to activate the motor.\nThe led_ring is the round ring and count determine how many LED elements to light up, and the color is the RBG color for all active elements. Each of these below will always be in the desired state of the shadow and once online, in the reported state for the device.\n{ \u0026quot;led_ring\u0026quot;: { \u0026quot;count\u0026quot;: 0, \u0026quot;color\u0026quot;: \u0026quot;#RRGGBB\u0026quot; }, \u0026quot;led\u0026quot;: \u0026quot;on|off\u0026quot;, \u0026quot;dispense_time_ms\u0026quot;: 2500, } There are also a temporary request and response objects used to track command state. The cloud logic will create the request object in the desired state section of the shadow, and once processed by the device, it will create the response object in the reported state section. Finally, cloud logic will reconcile and clean up the shadow document of any entries left.\nBelow are what the request and response objects should look like. The command and requestId attribute and values must match. For the request object, the timestamp attribute is when the request was made, while in the response object it is when the dispenser completed the operation.\n{ \u0026quot;desired\u0026quot;: { \u0026quot;request\u0026quot;: { \u0026quot;command\u0026quot;: \u0026quot;dispense\u0026quot;, \u0026quot;requestId\u0026quot;: \u0026quot;1234-5678\u0026quot;, \u0026quot;timestamp\u0026quot;: 12345 } }, \u0026quot;reported\u0026quot;: { \u0026quot;response\u0026quot;: { \u0026quot;command\u0026quot;: \u0026quot;dispense\u0026quot;, \u0026quot;requestId\u0026quot;: \u0026quot;1234-5678\u0026quot;, \u0026quot;result\u0026quot;: \u0026quot;success\u0026quot;, \u0026quot;timestamp\u0026quot;: 45678 } }, } The following sequence diagrams show the flows for different uses. The first flows are device-to-cloud, then Rules Engine actions, and then API generated flows.\nDevice FlowsTurn on/off LEDUses the device shadow to set the desired state of an LED. The unused motor controller\u0026#8217;s associated LED can be set on or off, while the LED ring can be addressed with an RGB color and number of LEDs to light. All LED operations take place through the device shadow.\nAt creation, the LEDs are all set to a desired state of off. The dispenser hardware should read and honor the shadow settings for the LED.\nFigure 1. Turn on the LED In this flow:\nDispenser subscribes to shadow delta topic, e.g., $aws/things/123/shadow/deltaDispenser publishes desired state change to shadow update for led (LED for second motor controller)If there is a difference between desired and reported states, the delta, \"led\": \"on\" is sent to the dispenserDispenser enables the LED locallyDispenser then publishes teh reported state of LED1 to the shadow update topicRules engine matches update operation and invokes logging event action This is the same flow for led1 and led_ring. For led_ring, the attributes are the amount of LEDs to light (0-5) and the RBG color in hex, e.g., #ff0000 for full red.\nNote: The LED operation can be on or off.\n Activate DispenserUses the device\u0026#8217;s shadow desired state to send a command (request) to the dispenser. After the dispenser has completed the operation, it updates the shadow\u0026#8217;s reported state to acknowledge the request.\nFigure 2. Activate Dispenser In this flow:\nRequest - User clicks on \"dispense\" button in web applicationLambda is invoked for that requestDispenser record readIf there is a good balance and no in-process requests \u0026lt; 5 seconds old:Record a new request in the dispenser recordPublish the request object to the dispensers shadow desired stateLog a successful request eventReturn to the API/web app a success messageIf there is not enough credits or a dispense request is still valid (\u0026lt;5 seconds old):Log an errorReturn to the API/web app a descriptive error The response operation is decoupled from the request in that the dispenser may be in an offline state. Once online, the response flow continues:\nDispenser received a shadow update on $aws/things/shadow/123/delta or $aws/things/shadow/123/update/acceptedIf the timestamp of the request is older than 5 seconds:Add a response object to the reported state with a result=ERROR indicator (optional - if submitted no credits will be deducted)Discard the message and log locallyIf the request is current (less than 5 seconds old):Activate the motor for set durationIn parallel if possible, a response object to the reported state with the same requestIdThe response message triggers the Rules Engine which looks at the shadow document for a state.reported.response objects and if found invokes the Lambda functionLambda determines this is a rules invocation and not APIReads the dispenser recordIf there is a matching requestIddeduct $1.00, clear requestId, update dispenser recordLog successful dispenser operationsDelete (set to null) and request and response objects in the dispensers shadowIf no matching dispense requestId was foundLog error (should not arrive here)Delete (set to null) and request and response objects in the dispensers shadow The Lambda will also clear out a stale dispense request. There can only be one in-flight dispense request in the dispenser\u0026#8217;s record.\nNote: A dispenser may get a free pour if it receives the dispense command and then goes offline before publishing the response message.\n Rules Engine FlowsThese flows are subscriptions made by the rules, and the actions they take.\nLogging EventsThe logging rule monitors all messages published to events and events/#, and invokes a Lambda to persist the events into the DynamoDB EventsTable.\nFigure 3. General Event Logging There are three logging rules for the workshop, all which log events to the EventsTable. The LogShadowEvents rule monitors for shadow update documents, adds the topic which will identify the dispenser, then invokes the ProcessEvents Lambda function. Similarly for messages published to the events and events/nnn (dispenser ID) topics, the LogGenericEvents and LogDispenserEvents rules process the messages and invoke ProcessEvents.\nThe Lambda function parses the incoming details and creates the formatted entries that then published to the DynamoDB EventsTable.\n "
},
{
	"uri": "https://cdd.example.com/docs/presenter/prerequisites.html",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": "We have strived to keep the amount of prerequisites to a minimum in order to setup the infrastructure for the workshop. Please ensure that all of these are completed before progressing to the next step.\n An AWS account to be used to host the workshop services and participant IAM user accounts. It is recommended to use or create a new or sandbox account as the participants will have permissions to see resources. Have a local Workstation or laptop available\nTo build and run the CloudFormation steps, you will need a workstation, an EC2 instance, or a laptop. All the steps are written and based on Linux/macOS. If you don\u0026rsquo;t have a similar environment, you may use an Amazon Linux based EC2 instance. No matter what you use, please ensure the following tools are installed:\n AWS CLI with admin credentials (see below) NodeJS \u0026gt;= 8.11.x and npm Python \u0026gt;= 3.6 and pip AWS Cloud Development Kit (CDK)  The following commands will verify that the command line tools are properly installed: $ iam get-account-summary # AWS CLI { \u0026#34;SummaryMap\u0026#34;: { ... } } $ node -v # NodeJS v12.8.0 $ npm -v # Node package manager 6.10.2 $ python --version # Python Python 3.7.4 $ pip --version # Python module manager pip 19.2.2 from ... $ cdk --version # CDK utility (from npm) 1.4.0 (build 175471f) \n   You can also use a Cloud 9 instance to manage the deployment of the stack. Make sure the AWS account used to launch Cloud 9 has full permissions needed by CloudFormation. You can then use the following command to clone the repository and setup the above dependencies.\nline 1   * An AWS CLI named profile. The profile in ~/.aws/config should contain the target region, and the ~/.aws/credentials file should have an access key and secret access key with administrative access (or minimum to deploy and run the stack). The profile name cdk-user will be used throughout this guide. * A registered domain name managed by Route 53 in the workshop account. This can either be through registration in Route 53, or making Amazon Route 53 the DNS service for the domain. If we want the URL for the workshop to be cdd.example.com, in Route 53 there needs to be a public hosted zone for example.com. * To target the appropriate account, region and other aspects, the following entries need to be considered and changed in the config.json file (the default value used in this guide listed first): * Region - us-west-2Region identifier, must support all AWS resources being used. * HostName - cdd.example.comThe fully qualified domain name entry to be created from the Route 53 hosted zone details above (example.com). Note, subdomain entries can also be used such as cdd.foo.example.com, but must be created from Route 53. * ProfileName - cdk-user\nThe AWS CLI profile name referenced above. It is used by the build and deploy steps to use the right account and credentials. * AdminUserName - adminThe username to log into the web application for administrative purposes. * AdminPassword - NO DEFAULT VALUEThis needs to be completed in the config.json file and is only used for web application related tasks, and not for AWS account activities. * cloud9InstanceSize - t3.smallInstance size for each participants Cloud 9 environment. Select larger (or smaller) depending upon how long the Amazon FreeRTOS compilation should take. * ParticipantLimit - 20The maximum amount of user accounts that can be created, after which, new account creation will fail. It is best to set this to 5-10% above total expected participants. * A Amazon Certificate Manager (ACM) validated server certificate in N. Virginia, to encrypt access to the web application. The certificate needs to be created in the N. Virginia region to work with Amazon CloudFront. Also, the issued certificate must support the fully qualified domain name you wish to use. For example, a certificate for *.example.com is valid for the domain name cdd.example.com, but would not work for cdd.foo.example.com since the wildcard is only matches the third element foo, and not the fourth one, cdd.\n "
},
{
	"uri": "https://cdd.example.com/docs/participant.html",
	"title": "Workshop Participant",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cdd.example.com/docs/presenter/deploy.html",
	"title": "Deploy Stack",
	"tags": [],
	"description": "",
	"content": " This section covers the steps to locally build and then deploy the stack to your preferred region. All steps are completed within the deploy/ directory.\nModify Template Files Copy the deploy/config.json.default to deploy/config.json and modify the new file and change the following parameters with the values from the prerequisites section:\n Region - AWS region to deploy and run the stack (for example, us-west-2 from previous section). HostName - Fully qualified domain name for the stack to build and use, must not exist, it will be created. ProfileName - The name of the AWS CLI profile with administrative permissions.  Process Local Dependencies There are various python packages that need to be installed within the cdk/.env directory in order for CDK to run and process the stack. Follow these steps once to install the dependencies.\nChange to the cdk directory and activate the Python virtual environment.\n$ cd Connected_drink_dispenser/cdk $ source .env/bin/activate # sh or bash $ pip install -r requirements.txt Verify by running cdk synth which will return a long CloudFormation stack in YAML. As long as no errors were returned, the cdk synth command has verified dependencies and created the artifacts in the cdk.out/ subdirectory (don\u0026rsquo;t delete this directory).\nDeploy Stack via CDK and CloudFormation With the prerequisites and config.json set, run cdk deploy. This will take at least 30 minutes if not longer as there is a CloudFront (CDN) distribution involved. The final output should look like this:\n✅ cdd-workshop Outputs: cdd-workshop.StaticSiteBucket34E5D9AF = cdd.example.com-static-site cdd-workshop.APIEndpoint = https://xxxxxxx.execute-api.us-west-2.amazonaws.com/prod/ cdd-workshop.CognitoIdentityPool = us-west-2:38c0c443-xxx-xxxx-xxxx-692ebe311dfe cdd-workshop.UserPoolCognitoUserPoolIdArn107A6E54 = arn:aws:cognito-idp:us-west-2:123456789012:userpool/us-west-2_foo cdd-workshop.StaticSiteDistributionId8C64EF2A = E1MK8XXXX2S9X cdd-workshop.APIEndpoint1793E782 = https://xxxxxxx.execute-api.us-west-2.amazonaws.com/prod/ cdd-workshop.UserPoolCognitoClientId49B6D8C4 = 4hp8jitmd6virxxxxxo68p6 cdd-workshop.UserPoolCognitoUserPoolIdA08E3514 = us-west-2_foo Stack ARN: arn:aws:cloudformation:us-west-2:123456789012:stack/cdd-workshop/deadbeef-d008-11e9-8962-02dbab669d48 $ When completed, you should be able to navigate to https://cdd.example.com to verify that CloudFront is working. There will be a NoSuchKey error, which we will fix in the next step, but you can verify that the HTTPS certificate is in place.\nIf there are any errors running cdk deploy, the stack will automatically rollback and delete all the resources. Due to the CloudFront distribution, this will take 30 minutes or longer to complete. Review the error, correct, and re-run the deploy step. Most errors will either be related to permissions associated with the credentials used to deploy, or lack of one of the prerequisites.\nDeploy Application and Documentation With the stack deployed, we need to read some of the outputs from above, create the single page application, and then deploy it and this documentation. To do so, run the deploy_app.py script.\n$ python deploy_app.py Verifying local configuration files Reading CloudFormation stack parameters to create files for web application Clearing S3 bucket of ALL objects Copying web application to S3 |################################| xxx/xxx⏎ Copying online documentation to S3 |################################| 121/121⏎"
},
{
	"uri": "https://cdd.example.com/docs/presenter.html",
	"title": "Setting Up the Workshop",
	"tags": [],
	"description": "",
	"content": " Welcome Presenter! This section will walk you through setting up the Connected Drink Dispenser workshop for participants. It covers the workshop setup, how procure and build hardware, and the approach to introduce the workshop and mentor the participants attending hte workshop.\nEach section covers details for understanding, setting up, and presenting the workshop. Follow each of these sections in order to fully build the workshop.\n Prerequisites to host the workshop for one or multiple runs. Building and deploying the workshop cloud assets. Procuring drink dispenser hardware. Presentation tips and FAQ for supporting participant. Layout of the repository.  "
},
{
	"uri": "https://cdd.example.com/docs/presenter/repository.html",
	"title": "Repository Layout",
	"tags": [],
	"description": "",
	"content": " Repository Layout An understanding of the repository is not required to run the workshop, but can be helpful when deploying the cloud assets or to understand supporting resources. The Connected Drink Dispenser Repository directory structure looks similar to this:\n├── cdk \u0026lt;--- CloudFormation Development Kit to build all resources ├── dispenser_app \u0026lt;--- Single Page App (SPA) ├── docs \u0026lt;--- Participant and presenter docs ├── LICENSE ├── NOTICE └── README.md \u0026lt;--- Main GitHub documentation page The main directories of interest are:\n cdk - Creates and optionally deploys all assets to the cloud for the workshop. dispenser_app - The SPA for managing per-workshop resources (admin user) and the web app for participants to interact with the device. docs - The source files to create the documentation site for inclusion into the main web site along side the dispenser app. You are current here!  "
},
{
	"uri": "https://cdd.example.com/docs/presenter/design_notes.html",
	"title": "Design Notes",
	"tags": [],
	"description": "",
	"content": "This is a compilation of designs used in the hardware and software.\nHardwareThe dispenser has four addressable components:\nled_ring: NeoPixel-based 5-element RGB LED ring. Can set the number of LEDs to light and the RGB color of all the LEDs.motor: Aquarium pump that can be actuated via the first addressable LED/motor h-bridge connectionled: Second addressable LED/motor h-bridge connection - used for initial testing (blinky)led2: Second addressable LED on the h-bridge board SoftwareAPI Methods\nTable 1. ApiTable MethodQuery parametersresponse bodyNotes/getResourcesNone{\"userName\": username, \"dispenserId\": \"100\", \"assets\": null}All responses will include userName and dispenserId. If there are no assets, that will be null, otherwise will be JSON object with the parameters: DynamoDB TablesTable 2. UserTable AttributePartition/Sort KeyFormatDefaultValueusernamePartitionstringnoneuser name from CognitonextDispenserId-string\"100\"The next dispenserId to vend, only added to the admin userdispenserId-stringnonevalue returned by default user adminassets-JSON objectvariesDefault: null, indicator to generate users resources The table is created empty. When the first user signs in, the Sign-in trigger will check for an admin user. If not present it will create one. The additional attributes for the admin user are:\nnextDispenserId - The number of the next dispenser to associate with a user These are the attributes for other users:\nPartition key: userName (string) - User name selected during Cognito sign-updispenserId (string) - Dispenser Id associated with user, IoT thing, etc.assets (object) - During sign-in, the /getResources method will create and populate Table 3. DispenserTable AttributePartition/Sort KeyFormatDefaultValuedispenserIdPartitionstring-3-digit unique value of dispenser, associated with usercredits-Number1Credits available to dispenser. Increment in 0.25 and deduct by 1.00 for a dispenseleaderBoardStatus-Number1Stage of completion. 1 is starting with user/dispenser created, 2 is next step, etc.leaderBoardTime-Number-Timestamp, without microseconds, when latest leaderBoardStatus stage changed.requests-list[] empty listList of active requests [\"requestId|command|timestamp|target\"] The table is created empty, and entries are created or deleted as individual users are registered. The table can be read by participants, but only updated by the admin user and Lambda functions.\nThis table tracks the status of credits, in-flight requests (requests), and other details regarding each dispenser.\nThe requests attribute contains a DynamoDB list of different in-flight requests. In this workshop, only the following is used (in JSON format):\n[ \u0026quot;1234-5678|dispense|12345678|device\u0026quot;, \u0026quot;4567-8901|anothercommand|87654321|device\u0026quot;, ] Both devices and applications interact with the list and construct a JSON message based on the contents, such as:\n{ \u0026quot;clientId\u0026quot;: \u0026quot;123\u0026quot;, \u0026quot;requestId\u0026quot;: \u0026quot;1234-5678\u0026quot;, \u0026quot;command\u0026quot;: \u0026quot;dispense\u0026quot;, \u0026quot;timestamp\u0026quot;: \u0026quot;12345678\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;device\u0026quot; } This is the representation of the first entry in the list. As requests are completed, the entity that validates the completion will remove them from the list. clientId maps to the dispenserId.\n User account setup and sign-inCognito sign-up and sign-in calls are made. When signing in, the app calls the GetResources method which checks if the authenticated user has a resources entry in the database. If it does, the values are returns. If not, it immediately returns a message so the app can request the CreateResources method. This method executes the following to create the resources:\nCheck if at limit for workshopUse username to create IAM user and credentialsCreate thing, certificate, attach to policycreate Cloud9 instance for userUpdate DynamoDB with the contents And after creation the values are returned within a 25 second period. The application should set a notice to the user that assets are being created and to wait.\nFigure 1. User Sign-up and Sign-in Flow Testing Lambda FunctionsFrom the cdd/ directory, use the following sam local command on the test events in tests/:\n$ sam local invoke \u0026quot;FunctionName\u0026quot; -e event.json $ # Or to use a specific profile $ sam local invoke --profile my-aws-profile \u0026quot;FunctionName\u0026quot; -e event.json Installing Packages for Lambda FunctionsIn order to properly operate in the Lambda runtime environment, use the following steps to include packages with proper share objects or binary components:\nIn the root of the Lambda function, execute the following, replace python version and package(s) to install: $ docker run -v \u0026quot;$PWD\u0026quot;:/var/task -it lambci/lambda:build-python3.7 /bin/bash -c \u0026quot;pip install cryptography -t .; exit\u0026quot; The /bin/bash -c \"pip install cryptography -t .; exit\" is a single line to install the packages in what is mapped to the local lambda directory. You could also use /bin/bash which will place you into the build container where the individual pip install package_name -t . lines could be processed.\n "
},
{
	"uri": "https://cdd.example.com/docs/glossary.html",
	"title": "Standardized Glossary",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cdd.example.com/docs/_footer.html",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Copyright © 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n"
},
{
	"uri": "https://cdd.example.com/docs/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Connected Drink Dispenser Workshop Welcome to the Connected Drink Dispenser Workshop!\nFrom this home page you can use the left side navigation to view the content of the workshop.\n"
},
{
	"uri": "https://cdd.example.com/docs/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cdd.example.com/docs/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]